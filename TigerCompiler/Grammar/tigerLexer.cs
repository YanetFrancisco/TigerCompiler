//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.4
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.4 C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g 2014-04-27 15:21:32

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


    using System;


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

namespace  TigerCompiler.Grammar 
{
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.4")]
[System.CLSCompliant(false)]
public partial class tigerLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int AACCESS=4;
	public const int ACCESS=5;
	public const int AND=6;
	public const int ARRAY=7;
	public const int ARRAYDEC=8;
	public const int ARRAYTYPE=9;
	public const int ASSIGN=10;
	public const int BACK_SLASH=11;
	public const int BINARYDIGIT=12;
	public const int BREAK=13;
	public const int CALL=14;
	public const int CBRACK=15;
	public const int CKEYS=16;
	public const int COLON=17;
	public const int COMMA=18;
	public const int COMMENT=19;
	public const int CPAR=20;
	public const int DECLIST=21;
	public const int DIGIT=22;
	public const int DIV=23;
	public const int DO=24;
	public const int DOT=25;
	public const int DOUBLE_QUOTE=26;
	public const int ELSE=27;
	public const int END=28;
	public const int EQ=29;
	public const int ESC_SEQ=30;
	public const int EXPLIST=31;
	public const int EXPSEQ=32;
	public const int FIELD=33;
	public const int FIELDLIST=34;
	public const int FOR=35;
	public const int FUNC=36;
	public const int FUNCBLOCK=37;
	public const int FUNCDEC=38;
	public const int GT=39;
	public const int GTEQ=40;
	public const int HALFOFBYTE=41;
	public const int ID=42;
	public const int IDACCESS=43;
	public const int IF=44;
	public const int IN=45;
	public const int INT=46;
	public const int LET=47;
	public const int LT=48;
	public const int LTEQ=49;
	public const int MINUS=50;
	public const int MULT=51;
	public const int NEG=52;
	public const int NIL=53;
	public const int NOTEQ=54;
	public const int OBRACK=55;
	public const int OCTAL=56;
	public const int OF=57;
	public const int OKEYS=58;
	public const int OPAR=59;
	public const int OR=60;
	public const int PLUS=61;
	public const int PRINTABLECHAR=62;
	public const int PRINT_CHAR=63;
	public const int PROC=64;
	public const int RECORDDEC=65;
	public const int RECORDTYPE=66;
	public const int SMCOL=67;
	public const int STRING=68;
	public const int THEN=69;
	public const int TO=70;
	public const int TYPE=71;
	public const int TYPEBLOCK=72;
	public const int TYPEDEC=73;
	public const int TYPEFIELD=74;
	public const int TYPEFIELDS=75;
	public const int TYPETOK=76;
	public const int VALUE=77;
	public const int VAR=78;
	public const int VARBLOCK=79;
	public const int WHILE=80;
	public const int WS=81;

    // delegates
    // delegators

	 public  tigerLexer()
	{
		OnCreated();
	}

	 public  tigerLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	 public  tigerLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_ARRAY();
	partial void LeaveRule_ARRAY();

	// $ANTLR start "ARRAY"
	[GrammarRule("ARRAY")]
	private void mARRAY()
	{
		EnterRule_ARRAY();
		EnterRule("ARRAY", 1);
		TraceIn("ARRAY", 1);
		try
		{
			int _type = ARRAY;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:62:6: ( 'array' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:62:8: 'array'
			{
			DebugLocation(62, 8);
			Match("array"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ARRAY", 1);
			LeaveRule("ARRAY", 1);
			LeaveRule_ARRAY();
		}
	}
	// $ANTLR end "ARRAY"

	partial void EnterRule_OF();
	partial void LeaveRule_OF();

	// $ANTLR start "OF"
	[GrammarRule("OF")]
	private void mOF()
	{
		EnterRule_OF();
		EnterRule("OF", 2);
		TraceIn("OF", 2);
		try
		{
			int _type = OF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:63:3: ( 'of' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:63:5: 'of'
			{
			DebugLocation(63, 5);
			Match("of"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OF", 2);
			LeaveRule("OF", 2);
			LeaveRule_OF();
		}
	}
	// $ANTLR end "OF"

	partial void EnterRule_FUNC();
	partial void LeaveRule_FUNC();

	// $ANTLR start "FUNC"
	[GrammarRule("FUNC")]
	private void mFUNC()
	{
		EnterRule_FUNC();
		EnterRule("FUNC", 3);
		TraceIn("FUNC", 3);
		try
		{
			int _type = FUNC;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:64:5: ( 'function' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:64:7: 'function'
			{
			DebugLocation(64, 7);
			Match("function"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FUNC", 3);
			LeaveRule("FUNC", 3);
			LeaveRule_FUNC();
		}
	}
	// $ANTLR end "FUNC"

	partial void EnterRule_VAR();
	partial void LeaveRule_VAR();

	// $ANTLR start "VAR"
	[GrammarRule("VAR")]
	private void mVAR()
	{
		EnterRule_VAR();
		EnterRule("VAR", 4);
		TraceIn("VAR", 4);
		try
		{
			int _type = VAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:65:4: ( 'var' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:65:6: 'var'
			{
			DebugLocation(65, 6);
			Match("var"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("VAR", 4);
			LeaveRule("VAR", 4);
			LeaveRule_VAR();
		}
	}
	// $ANTLR end "VAR"

	partial void EnterRule_IF();
	partial void LeaveRule_IF();

	// $ANTLR start "IF"
	[GrammarRule("IF")]
	private void mIF()
	{
		EnterRule_IF();
		EnterRule("IF", 5);
		TraceIn("IF", 5);
		try
		{
			int _type = IF;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:66:3: ( 'if' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:66:5: 'if'
			{
			DebugLocation(66, 5);
			Match("if"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IF", 5);
			LeaveRule("IF", 5);
			LeaveRule_IF();
		}
	}
	// $ANTLR end "IF"

	partial void EnterRule_THEN();
	partial void LeaveRule_THEN();

	// $ANTLR start "THEN"
	[GrammarRule("THEN")]
	private void mTHEN()
	{
		EnterRule_THEN();
		EnterRule("THEN", 6);
		TraceIn("THEN", 6);
		try
		{
			int _type = THEN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:67:5: ( 'then' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:67:7: 'then'
			{
			DebugLocation(67, 7);
			Match("then"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("THEN", 6);
			LeaveRule("THEN", 6);
			LeaveRule_THEN();
		}
	}
	// $ANTLR end "THEN"

	partial void EnterRule_ELSE();
	partial void LeaveRule_ELSE();

	// $ANTLR start "ELSE"
	[GrammarRule("ELSE")]
	private void mELSE()
	{
		EnterRule_ELSE();
		EnterRule("ELSE", 7);
		TraceIn("ELSE", 7);
		try
		{
			int _type = ELSE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:68:5: ( 'else' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:68:7: 'else'
			{
			DebugLocation(68, 7);
			Match("else"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ELSE", 7);
			LeaveRule("ELSE", 7);
			LeaveRule_ELSE();
		}
	}
	// $ANTLR end "ELSE"

	partial void EnterRule_WHILE();
	partial void LeaveRule_WHILE();

	// $ANTLR start "WHILE"
	[GrammarRule("WHILE")]
	private void mWHILE()
	{
		EnterRule_WHILE();
		EnterRule("WHILE", 8);
		TraceIn("WHILE", 8);
		try
		{
			int _type = WHILE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:69:6: ( 'while' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:69:8: 'while'
			{
			DebugLocation(69, 8);
			Match("while"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WHILE", 8);
			LeaveRule("WHILE", 8);
			LeaveRule_WHILE();
		}
	}
	// $ANTLR end "WHILE"

	partial void EnterRule_DO();
	partial void LeaveRule_DO();

	// $ANTLR start "DO"
	[GrammarRule("DO")]
	private void mDO()
	{
		EnterRule_DO();
		EnterRule("DO", 9);
		TraceIn("DO", 9);
		try
		{
			int _type = DO;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:70:3: ( 'do' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:70:5: 'do'
			{
			DebugLocation(70, 5);
			Match("do"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DO", 9);
			LeaveRule("DO", 9);
			LeaveRule_DO();
		}
	}
	// $ANTLR end "DO"

	partial void EnterRule_FOR();
	partial void LeaveRule_FOR();

	// $ANTLR start "FOR"
	[GrammarRule("FOR")]
	private void mFOR()
	{
		EnterRule_FOR();
		EnterRule("FOR", 10);
		TraceIn("FOR", 10);
		try
		{
			int _type = FOR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:71:4: ( 'for' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:71:6: 'for'
			{
			DebugLocation(71, 6);
			Match("for"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("FOR", 10);
			LeaveRule("FOR", 10);
			LeaveRule_FOR();
		}
	}
	// $ANTLR end "FOR"

	partial void EnterRule_TO();
	partial void LeaveRule_TO();

	// $ANTLR start "TO"
	[GrammarRule("TO")]
	private void mTO()
	{
		EnterRule_TO();
		EnterRule("TO", 11);
		TraceIn("TO", 11);
		try
		{
			int _type = TO;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:72:3: ( 'to' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:72:5: 'to'
			{
			DebugLocation(72, 5);
			Match("to"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TO", 11);
			LeaveRule("TO", 11);
			LeaveRule_TO();
		}
	}
	// $ANTLR end "TO"

	partial void EnterRule_BREAK();
	partial void LeaveRule_BREAK();

	// $ANTLR start "BREAK"
	[GrammarRule("BREAK")]
	private void mBREAK()
	{
		EnterRule_BREAK();
		EnterRule("BREAK", 12);
		TraceIn("BREAK", 12);
		try
		{
			int _type = BREAK;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:73:6: ( 'break' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:73:8: 'break'
			{
			DebugLocation(73, 8);
			Match("break"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BREAK", 12);
			LeaveRule("BREAK", 12);
			LeaveRule_BREAK();
		}
	}
	// $ANTLR end "BREAK"

	partial void EnterRule_LET();
	partial void LeaveRule_LET();

	// $ANTLR start "LET"
	[GrammarRule("LET")]
	private void mLET()
	{
		EnterRule_LET();
		EnterRule("LET", 13);
		TraceIn("LET", 13);
		try
		{
			int _type = LET;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:74:4: ( 'let' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:74:6: 'let'
			{
			DebugLocation(74, 6);
			Match("let"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LET", 13);
			LeaveRule("LET", 13);
			LeaveRule_LET();
		}
	}
	// $ANTLR end "LET"

	partial void EnterRule_IN();
	partial void LeaveRule_IN();

	// $ANTLR start "IN"
	[GrammarRule("IN")]
	private void mIN()
	{
		EnterRule_IN();
		EnterRule("IN", 14);
		TraceIn("IN", 14);
		try
		{
			int _type = IN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:75:3: ( 'in' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:75:5: 'in'
			{
			DebugLocation(75, 5);
			Match("in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN", 14);
			LeaveRule("IN", 14);
			LeaveRule_IN();
		}
	}
	// $ANTLR end "IN"

	partial void EnterRule_END();
	partial void LeaveRule_END();

	// $ANTLR start "END"
	[GrammarRule("END")]
	private void mEND()
	{
		EnterRule_END();
		EnterRule("END", 15);
		TraceIn("END", 15);
		try
		{
			int _type = END;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:76:4: ( 'end' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:76:6: 'end'
			{
			DebugLocation(76, 6);
			Match("end"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("END", 15);
			LeaveRule("END", 15);
			LeaveRule_END();
		}
	}
	// $ANTLR end "END"

	partial void EnterRule_TYPETOK();
	partial void LeaveRule_TYPETOK();

	// $ANTLR start "TYPETOK"
	[GrammarRule("TYPETOK")]
	private void mTYPETOK()
	{
		EnterRule_TYPETOK();
		EnterRule("TYPETOK", 16);
		TraceIn("TYPETOK", 16);
		try
		{
			int _type = TYPETOK;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:77:8: ( 'type' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:77:9: 'type'
			{
			DebugLocation(77, 9);
			Match("type"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPETOK", 16);
			LeaveRule("TYPETOK", 16);
			LeaveRule_TYPETOK();
		}
	}
	// $ANTLR end "TYPETOK"

	partial void EnterRule_TYPE();
	partial void LeaveRule_TYPE();

	// $ANTLR start "TYPE"
	[GrammarRule("TYPE")]
	private void mTYPE()
	{
		EnterRule_TYPE();
		EnterRule("TYPE", 17);
		TraceIn("TYPE", 17);
		try
		{
			int _type = TYPE;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:78:5: ( 'int' | 'string' )
			int alt1=2;
			try { DebugEnterDecision(1, false);
			int LA1_0 = input.LA(1);

			if ((LA1_0=='i'))
			{
				alt1 = 1;
			}
			else if ((LA1_0=='s'))
			{
				alt1 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 1, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(1); }
			switch (alt1)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:78:7: 'int'
				{
				DebugLocation(78, 7);
				Match("int"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:78:15: 'string'
				{
				DebugLocation(78, 15);
				Match("string"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPE", 17);
			LeaveRule("TYPE", 17);
			LeaveRule_TYPE();
		}
	}
	// $ANTLR end "TYPE"

	partial void EnterRule_NIL();
	partial void LeaveRule_NIL();

	// $ANTLR start "NIL"
	[GrammarRule("NIL")]
	private void mNIL()
	{
		EnterRule_NIL();
		EnterRule("NIL", 18);
		TraceIn("NIL", 18);
		try
		{
			int _type = NIL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:79:4: ( 'nil' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:79:7: 'nil'
			{
			DebugLocation(79, 7);
			Match("nil"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NIL", 18);
			LeaveRule("NIL", 18);
			LeaveRule_NIL();
		}
	}
	// $ANTLR end "NIL"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 19);
		TraceIn("PLUS", 19);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:83:5: ( '+' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:83:7: '+'
			{
			DebugLocation(83, 7);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 19);
			LeaveRule("PLUS", 19);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 20);
		TraceIn("MINUS", 20);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:84:6: ( '-' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:84:8: '-'
			{
			DebugLocation(84, 8);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 20);
			LeaveRule("MINUS", 20);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_MULT();
	partial void LeaveRule_MULT();

	// $ANTLR start "MULT"
	[GrammarRule("MULT")]
	private void mMULT()
	{
		EnterRule_MULT();
		EnterRule("MULT", 21);
		TraceIn("MULT", 21);
		try
		{
			int _type = MULT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:85:5: ( '*' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:85:7: '*'
			{
			DebugLocation(85, 7);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MULT", 21);
			LeaveRule("MULT", 21);
			LeaveRule_MULT();
		}
	}
	// $ANTLR end "MULT"

	partial void EnterRule_DIV();
	partial void LeaveRule_DIV();

	// $ANTLR start "DIV"
	[GrammarRule("DIV")]
	private void mDIV()
	{
		EnterRule_DIV();
		EnterRule("DIV", 22);
		TraceIn("DIV", 22);
		try
		{
			int _type = DIV;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:86:4: ( '/' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:86:6: '/'
			{
			DebugLocation(86, 6);
			Match('/'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DIV", 22);
			LeaveRule("DIV", 22);
			LeaveRule_DIV();
		}
	}
	// $ANTLR end "DIV"

	partial void EnterRule_EQ();
	partial void LeaveRule_EQ();

	// $ANTLR start "EQ"
	[GrammarRule("EQ")]
	private void mEQ()
	{
		EnterRule_EQ();
		EnterRule("EQ", 23);
		TraceIn("EQ", 23);
		try
		{
			int _type = EQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:87:3: ( '=' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:87:5: '='
			{
			DebugLocation(87, 5);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQ", 23);
			LeaveRule("EQ", 23);
			LeaveRule_EQ();
		}
	}
	// $ANTLR end "EQ"

	partial void EnterRule_NOTEQ();
	partial void LeaveRule_NOTEQ();

	// $ANTLR start "NOTEQ"
	[GrammarRule("NOTEQ")]
	private void mNOTEQ()
	{
		EnterRule_NOTEQ();
		EnterRule("NOTEQ", 24);
		TraceIn("NOTEQ", 24);
		try
		{
			int _type = NOTEQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:88:6: ( '<>' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:88:8: '<>'
			{
			DebugLocation(88, 8);
			Match("<>"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOTEQ", 24);
			LeaveRule("NOTEQ", 24);
			LeaveRule_NOTEQ();
		}
	}
	// $ANTLR end "NOTEQ"

	partial void EnterRule_LTEQ();
	partial void LeaveRule_LTEQ();

	// $ANTLR start "LTEQ"
	[GrammarRule("LTEQ")]
	private void mLTEQ()
	{
		EnterRule_LTEQ();
		EnterRule("LTEQ", 25);
		TraceIn("LTEQ", 25);
		try
		{
			int _type = LTEQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:89:5: ( '<=' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:89:7: '<='
			{
			DebugLocation(89, 7);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LTEQ", 25);
			LeaveRule("LTEQ", 25);
			LeaveRule_LTEQ();
		}
	}
	// $ANTLR end "LTEQ"

	partial void EnterRule_GTEQ();
	partial void LeaveRule_GTEQ();

	// $ANTLR start "GTEQ"
	[GrammarRule("GTEQ")]
	private void mGTEQ()
	{
		EnterRule_GTEQ();
		EnterRule("GTEQ", 26);
		TraceIn("GTEQ", 26);
		try
		{
			int _type = GTEQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:90:5: ( '>=' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:90:7: '>='
			{
			DebugLocation(90, 7);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GTEQ", 26);
			LeaveRule("GTEQ", 26);
			LeaveRule_GTEQ();
		}
	}
	// $ANTLR end "GTEQ"

	partial void EnterRule_LT();
	partial void LeaveRule_LT();

	// $ANTLR start "LT"
	[GrammarRule("LT")]
	private void mLT()
	{
		EnterRule_LT();
		EnterRule("LT", 27);
		TraceIn("LT", 27);
		try
		{
			int _type = LT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:91:3: ( '<' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:91:5: '<'
			{
			DebugLocation(91, 5);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LT", 27);
			LeaveRule("LT", 27);
			LeaveRule_LT();
		}
	}
	// $ANTLR end "LT"

	partial void EnterRule_GT();
	partial void LeaveRule_GT();

	// $ANTLR start "GT"
	[GrammarRule("GT")]
	private void mGT()
	{
		EnterRule_GT();
		EnterRule("GT", 28);
		TraceIn("GT", 28);
		try
		{
			int _type = GT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:92:3: ( '>' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:92:5: '>'
			{
			DebugLocation(92, 5);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GT", 28);
			LeaveRule("GT", 28);
			LeaveRule_GT();
		}
	}
	// $ANTLR end "GT"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 29);
		TraceIn("AND", 29);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:93:4: ( '&' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:93:6: '&'
			{
			DebugLocation(93, 6);
			Match('&'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 29);
			LeaveRule("AND", 29);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 30);
		TraceIn("OR", 30);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:94:3: ( '|' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:94:5: '|'
			{
			DebugLocation(94, 5);
			Match('|'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 30);
			LeaveRule("OR", 30);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_OPAR();
	partial void LeaveRule_OPAR();

	// $ANTLR start "OPAR"
	[GrammarRule("OPAR")]
	private void mOPAR()
	{
		EnterRule_OPAR();
		EnterRule("OPAR", 31);
		TraceIn("OPAR", 31);
		try
		{
			int _type = OPAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:96:5: ( '(' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:96:7: '('
			{
			DebugLocation(96, 7);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPAR", 31);
			LeaveRule("OPAR", 31);
			LeaveRule_OPAR();
		}
	}
	// $ANTLR end "OPAR"

	partial void EnterRule_CPAR();
	partial void LeaveRule_CPAR();

	// $ANTLR start "CPAR"
	[GrammarRule("CPAR")]
	private void mCPAR()
	{
		EnterRule_CPAR();
		EnterRule("CPAR", 32);
		TraceIn("CPAR", 32);
		try
		{
			int _type = CPAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:97:5: ( ')' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:97:7: ')'
			{
			DebugLocation(97, 7);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CPAR", 32);
			LeaveRule("CPAR", 32);
			LeaveRule_CPAR();
		}
	}
	// $ANTLR end "CPAR"

	partial void EnterRule_OBRACK();
	partial void LeaveRule_OBRACK();

	// $ANTLR start "OBRACK"
	[GrammarRule("OBRACK")]
	private void mOBRACK()
	{
		EnterRule_OBRACK();
		EnterRule("OBRACK", 33);
		TraceIn("OBRACK", 33);
		try
		{
			int _type = OBRACK;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:98:7: ( '[' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:98:9: '['
			{
			DebugLocation(98, 9);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OBRACK", 33);
			LeaveRule("OBRACK", 33);
			LeaveRule_OBRACK();
		}
	}
	// $ANTLR end "OBRACK"

	partial void EnterRule_CBRACK();
	partial void LeaveRule_CBRACK();

	// $ANTLR start "CBRACK"
	[GrammarRule("CBRACK")]
	private void mCBRACK()
	{
		EnterRule_CBRACK();
		EnterRule("CBRACK", 34);
		TraceIn("CBRACK", 34);
		try
		{
			int _type = CBRACK;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:99:7: ( ']' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:99:9: ']'
			{
			DebugLocation(99, 9);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CBRACK", 34);
			LeaveRule("CBRACK", 34);
			LeaveRule_CBRACK();
		}
	}
	// $ANTLR end "CBRACK"

	partial void EnterRule_OKEYS();
	partial void LeaveRule_OKEYS();

	// $ANTLR start "OKEYS"
	[GrammarRule("OKEYS")]
	private void mOKEYS()
	{
		EnterRule_OKEYS();
		EnterRule("OKEYS", 35);
		TraceIn("OKEYS", 35);
		try
		{
			int _type = OKEYS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:100:6: ( '{' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:100:8: '{'
			{
			DebugLocation(100, 8);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OKEYS", 35);
			LeaveRule("OKEYS", 35);
			LeaveRule_OKEYS();
		}
	}
	// $ANTLR end "OKEYS"

	partial void EnterRule_CKEYS();
	partial void LeaveRule_CKEYS();

	// $ANTLR start "CKEYS"
	[GrammarRule("CKEYS")]
	private void mCKEYS()
	{
		EnterRule_CKEYS();
		EnterRule("CKEYS", 36);
		TraceIn("CKEYS", 36);
		try
		{
			int _type = CKEYS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:101:6: ( '}' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:101:8: '}'
			{
			DebugLocation(101, 8);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CKEYS", 36);
			LeaveRule("CKEYS", 36);
			LeaveRule_CKEYS();
		}
	}
	// $ANTLR end "CKEYS"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 37);
		TraceIn("DOT", 37);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:102:4: ( '.' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:102:6: '.'
			{
			DebugLocation(102, 6);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 37);
			LeaveRule("DOT", 37);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 38);
		TraceIn("COMMA", 38);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:103:6: ( ',' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:103:8: ','
			{
			DebugLocation(103, 8);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 38);
			LeaveRule("COMMA", 38);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_SMCOL();
	partial void LeaveRule_SMCOL();

	// $ANTLR start "SMCOL"
	[GrammarRule("SMCOL")]
	private void mSMCOL()
	{
		EnterRule_SMCOL();
		EnterRule("SMCOL", 39);
		TraceIn("SMCOL", 39);
		try
		{
			int _type = SMCOL;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:104:6: ( ';' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:104:8: ';'
			{
			DebugLocation(104, 8);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SMCOL", 39);
			LeaveRule("SMCOL", 39);
			LeaveRule_SMCOL();
		}
	}
	// $ANTLR end "SMCOL"

	partial void EnterRule_COLON();
	partial void LeaveRule_COLON();

	// $ANTLR start "COLON"
	[GrammarRule("COLON")]
	private void mCOLON()
	{
		EnterRule_COLON();
		EnterRule("COLON", 40);
		TraceIn("COLON", 40);
		try
		{
			int _type = COLON;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:105:6: ( ':' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:105:8: ':'
			{
			DebugLocation(105, 8);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COLON", 40);
			LeaveRule("COLON", 40);
			LeaveRule_COLON();
		}
	}
	// $ANTLR end "COLON"

	partial void EnterRule_ASSIGN();
	partial void LeaveRule_ASSIGN();

	// $ANTLR start "ASSIGN"
	[GrammarRule("ASSIGN")]
	private void mASSIGN()
	{
		EnterRule_ASSIGN();
		EnterRule("ASSIGN", 41);
		TraceIn("ASSIGN", 41);
		try
		{
			int _type = ASSIGN;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:106:7: ( ':=' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:106:9: ':='
			{
			DebugLocation(106, 9);
			Match(":="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASSIGN", 41);
			LeaveRule("ASSIGN", 41);
			LeaveRule_ASSIGN();
		}
	}
	// $ANTLR end "ASSIGN"

	partial void EnterRule_ID();
	partial void LeaveRule_ID();

	// $ANTLR start "ID"
	[GrammarRule("ID")]
	private void mID()
	{
		EnterRule_ID();
		EnterRule("ID", 42);
		TraceIn("ID", 42);
		try
		{
			int _type = ID;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:108:5: ( ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )* )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:108:7: ( 'a' .. 'z' | 'A' .. 'Z' ) ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			{
			DebugLocation(108, 7);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(108, 27);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:108:27: ( 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=2;
				try { DebugEnterDecision(2, false);
				int LA2_0 = input.LA(1);

				if (((LA2_0>='0' && LA2_0<='9')||(LA2_0>='A' && LA2_0<='Z')||LA2_0=='_'||(LA2_0>='a' && LA2_0<='z')))
				{
					alt2 = 1;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:
					{
					DebugLocation(108, 27);
					input.Consume();


					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ID", 42);
			LeaveRule("ID", 42);
			LeaveRule_ID();
		}
	}
	// $ANTLR end "ID"

	partial void EnterRule_INT();
	partial void LeaveRule_INT();

	// $ANTLR start "INT"
	[GrammarRule("INT")]
	private void mINT()
	{
		EnterRule_INT();
		EnterRule("INT", 43);
		TraceIn("INT", 43);
		try
		{
			int _type = INT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:111:5: ( ( '0' .. '9' )+ )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:111:7: ( '0' .. '9' )+
			{
			DebugLocation(111, 7);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:111:7: ( '0' .. '9' )+
			int cnt3=0;
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_0 = input.LA(1);

				if (((LA3_0>='0' && LA3_0<='9')))
				{
					alt3 = 1;
				}


				} finally { DebugExitDecision(3); }
				switch (alt3)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:
					{
					DebugLocation(111, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt3 >= 1)
						goto loop3;

					EarlyExitException eee3 = new EarlyExitException( 3, input );
					DebugRecognitionException(eee3);
					throw eee3;
				}
				cnt3++;
			}
			loop3:
				;

			} finally { DebugExitSubRule(3); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("INT", 43);
			LeaveRule("INT", 43);
			LeaveRule_INT();
		}
	}
	// $ANTLR end "INT"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 44);
		TraceIn("WS", 44);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:114:5: ( ( ' ' | '\\t' | '\\r' | '\\n' ) )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:114:9: ( ' ' | '\\t' | '\\r' | '\\n' )
			{
			DebugLocation(114, 9);
			if ((input.LA(1)>='\t' && input.LA(1)<='\n')||input.LA(1)=='\r'||input.LA(1)==' ')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(114, 37);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 44);
			LeaveRule("WS", 44);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_COMMENT();
	partial void LeaveRule_COMMENT();

	// $ANTLR start "COMMENT"
	[GrammarRule("COMMENT")]
	private void mCOMMENT()
	{
		EnterRule_COMMENT();
		EnterRule("COMMENT", 45);
		TraceIn("COMMENT", 45);
		try
		{
			int _type = COMMENT;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:118:8: ( '/*' ( options {greedy=false; } : COMMENT | . )* '*/' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:118:12: '/*' ( options {greedy=false; } : COMMENT | . )* '*/'
			{
			DebugLocation(118, 12);
			Match("/*"); 

			DebugLocation(118, 17);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:118:17: ( options {greedy=false; } : COMMENT | . )*
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=3;
				try { DebugEnterDecision(4, false);
				int LA4_0 = input.LA(1);

				if ((LA4_0=='*'))
				{
					int LA4_1 = input.LA(2);

					if ((LA4_1=='/'))
					{
						alt4 = 3;
					}
					else if (((LA4_1>='\u0000' && LA4_1<='.')||(LA4_1>='0' && LA4_1<='\uFFFF')))
					{
						alt4 = 2;
					}


				}
				else if ((LA4_0=='/'))
				{
					int LA4_2 = input.LA(2);

					if ((LA4_2=='*'))
					{
						alt4 = 1;
					}
					else if (((LA4_2>='\u0000' && LA4_2<=')')||(LA4_2>='+' && LA4_2<='\uFFFF')))
					{
						alt4 = 2;
					}


				}
				else if (((LA4_0>='\u0000' && LA4_0<=')')||(LA4_0>='+' && LA4_0<='.')||(LA4_0>='0' && LA4_0<='\uFFFF')))
				{
					alt4 = 2;
				}


				} finally { DebugExitDecision(4); }
				switch ( alt4 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:118:44: COMMENT
					{
					DebugLocation(118, 44);
					mCOMMENT(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:118:53: .
					{
					DebugLocation(118, 53);
					MatchAny(); 

					}
					break;

				default:
					goto loop4;
				}
			}

			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(118, 57);
			Match("*/"); 

			DebugLocation(118, 62);
			_channel=Hidden;

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMENT", 45);
			LeaveRule("COMMENT", 45);
			LeaveRule_COMMENT();
		}
	}
	// $ANTLR end "COMMENT"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 46);
		TraceIn("DIGIT", 46);
		try
		{
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:121:16: ( '0' .. '9' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:
			{
			DebugLocation(121, 16);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 46);
			LeaveRule("DIGIT", 46);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_BINARYDIGIT();
	partial void LeaveRule_BINARYDIGIT();

	// $ANTLR start "BINARYDIGIT"
	[GrammarRule("BINARYDIGIT")]
	private void mBINARYDIGIT()
	{
		EnterRule_BINARYDIGIT();
		EnterRule("BINARYDIGIT", 47);
		TraceIn("BINARYDIGIT", 47);
		try
		{
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:122:22: ( '0' .. '1' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:
			{
			DebugLocation(122, 22);
			if ((input.LA(1)>='0' && input.LA(1)<='1'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("BINARYDIGIT", 47);
			LeaveRule("BINARYDIGIT", 47);
			LeaveRule_BINARYDIGIT();
		}
	}
	// $ANTLR end "BINARYDIGIT"

	partial void EnterRule_OCTAL();
	partial void LeaveRule_OCTAL();

	// $ANTLR start "OCTAL"
	[GrammarRule("OCTAL")]
	private void mOCTAL()
	{
		EnterRule_OCTAL();
		EnterRule("OCTAL", 48);
		TraceIn("OCTAL", 48);
		try
		{
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:123:16: ( '0' .. '7' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:
			{
			DebugLocation(123, 16);
			if ((input.LA(1)>='0' && input.LA(1)<='7'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("OCTAL", 48);
			LeaveRule("OCTAL", 48);
			LeaveRule_OCTAL();
		}
	}
	// $ANTLR end "OCTAL"

	partial void EnterRule_BACK_SLASH();
	partial void LeaveRule_BACK_SLASH();

	// $ANTLR start "BACK_SLASH"
	[GrammarRule("BACK_SLASH")]
	private void mBACK_SLASH()
	{
		EnterRule_BACK_SLASH();
		EnterRule("BACK_SLASH", 49);
		TraceIn("BACK_SLASH", 49);
		try
		{
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:125:23: ( '\\\\' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:125:25: '\\\\'
			{
			DebugLocation(125, 25);
			Match('\\'); 

			}

		}
		finally
		{
			TraceOut("BACK_SLASH", 49);
			LeaveRule("BACK_SLASH", 49);
			LeaveRule_BACK_SLASH();
		}
	}
	// $ANTLR end "BACK_SLASH"

	partial void EnterRule_DOUBLE_QUOTE();
	partial void LeaveRule_DOUBLE_QUOTE();

	// $ANTLR start "DOUBLE_QUOTE"
	[GrammarRule("DOUBLE_QUOTE")]
	private void mDOUBLE_QUOTE()
	{
		EnterRule_DOUBLE_QUOTE();
		EnterRule("DOUBLE_QUOTE", 50);
		TraceIn("DOUBLE_QUOTE", 50);
		try
		{
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:126:23: ( '\\\"' )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:126:25: '\\\"'
			{
			DebugLocation(126, 25);
			Match('\"'); 

			}

		}
		finally
		{
			TraceOut("DOUBLE_QUOTE", 50);
			LeaveRule("DOUBLE_QUOTE", 50);
			LeaveRule_DOUBLE_QUOTE();
		}
	}
	// $ANTLR end "DOUBLE_QUOTE"

	partial void EnterRule_PRINT_CHAR();
	partial void LeaveRule_PRINT_CHAR();

	// $ANTLR start "PRINT_CHAR"
	[GrammarRule("PRINT_CHAR")]
	private void mPRINT_CHAR()
	{
		EnterRule_PRINT_CHAR();
		EnterRule("PRINT_CHAR", 51);
		TraceIn("PRINT_CHAR", 51);
		try
		{
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:127:23: ( ( ( ' ' .. '!' ) | ( '#' .. '[' ) | ( ']' .. '~' ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:
			{
			DebugLocation(127, 23);
			if ((input.LA(1)>=' ' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='~'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("PRINT_CHAR", 51);
			LeaveRule("PRINT_CHAR", 51);
			LeaveRule_PRINT_CHAR();
		}
	}
	// $ANTLR end "PRINT_CHAR"

	partial void EnterRule_HALFOFBYTE();
	partial void LeaveRule_HALFOFBYTE();

	// $ANTLR start "HALFOFBYTE"
	[GrammarRule("HALFOFBYTE")]
	private void mHALFOFBYTE()
	{
		EnterRule_HALFOFBYTE();
		EnterRule("HALFOFBYTE", 52);
		TraceIn("HALFOFBYTE", 52);
		try
		{
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:129:2: ( '0' DIGIT DIGIT | '1' ( BINARYDIGIT DIGIT | '2' OCTAL ) )
			int alt6=2;
			try { DebugEnterDecision(6, false);
			int LA6_0 = input.LA(1);

			if ((LA6_0=='0'))
			{
				alt6 = 1;
			}
			else if ((LA6_0=='1'))
			{
				alt6 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 6, 0, input);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:130:3: '0' DIGIT DIGIT
				{
				DebugLocation(130, 3);
				Match('0'); 
				DebugLocation(130, 7);
				mDIGIT(); 
				DebugLocation(130, 13);
				mDIGIT(); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:131:3: '1' ( BINARYDIGIT DIGIT | '2' OCTAL )
				{
				DebugLocation(131, 3);
				Match('1'); 
				DebugLocation(131, 7);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:131:7: ( BINARYDIGIT DIGIT | '2' OCTAL )
				int alt5=2;
				try { DebugEnterSubRule(5);
				try { DebugEnterDecision(5, false);
				int LA5_0 = input.LA(1);

				if (((LA5_0>='0' && LA5_0<='1')))
				{
					alt5 = 1;
				}
				else if ((LA5_0=='2'))
				{
					alt5 = 2;
				}
				else
				{
					NoViableAltException nvae = new NoViableAltException("", 5, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
				} finally { DebugExitDecision(5); }
				switch (alt5)
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:131:8: BINARYDIGIT DIGIT
					{
					DebugLocation(131, 8);
					mBINARYDIGIT(); 
					DebugLocation(131, 20);
					mDIGIT(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:131:28: '2' OCTAL
					{
					DebugLocation(131, 28);
					Match('2'); 
					DebugLocation(131, 32);
					mOCTAL(); 

					}
					break;

				}
				} finally { DebugExitSubRule(5); }


				}
				break;

			}
		}
		finally
		{
			TraceOut("HALFOFBYTE", 52);
			LeaveRule("HALFOFBYTE", 52);
			LeaveRule_HALFOFBYTE();
		}
	}
	// $ANTLR end "HALFOFBYTE"

	partial void EnterRule_PRINTABLECHAR();
	partial void LeaveRule_PRINTABLECHAR();

	// $ANTLR start "PRINTABLECHAR"
	[GrammarRule("PRINTABLECHAR")]
	private void mPRINTABLECHAR()
	{
		EnterRule_PRINTABLECHAR();
		EnterRule("PRINTABLECHAR", 53);
		TraceIn("PRINTABLECHAR", 53);
		try
		{
			int _type = PRINTABLECHAR;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:133:15: ( ( ( ' ' .. '!' ) | ( '#' .. '[' ) | ( ']' .. '~' ) ) )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:
			{
			DebugLocation(133, 15);
			if ((input.LA(1)>=' ' && input.LA(1)<='!')||(input.LA(1)>='#' && input.LA(1)<='[')||(input.LA(1)>=']' && input.LA(1)<='~'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PRINTABLECHAR", 53);
			LeaveRule("PRINTABLECHAR", 53);
			LeaveRule_PRINTABLECHAR();
		}
	}
	// $ANTLR end "PRINTABLECHAR"

	partial void EnterRule_STRING();
	partial void LeaveRule_STRING();

	// $ANTLR start "STRING"
	[GrammarRule("STRING")]
	private void mSTRING()
	{
		EnterRule_STRING();
		EnterRule("STRING", 54);
		TraceIn("STRING", 54);
		try
		{
			int _type = STRING;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:137:7: ( DOUBLE_QUOTE ( ESC_SEQ | PRINTABLECHAR )* DOUBLE_QUOTE )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:137:11: DOUBLE_QUOTE ( ESC_SEQ | PRINTABLECHAR )* DOUBLE_QUOTE
			{
			DebugLocation(137, 11);
			mDOUBLE_QUOTE(); 
			DebugLocation(137, 24);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:137:24: ( ESC_SEQ | PRINTABLECHAR )*
			try { DebugEnterSubRule(7);
			while (true)
			{
				int alt7=3;
				try { DebugEnterDecision(7, false);
				int LA7_0 = input.LA(1);

				if ((LA7_0=='\\'))
				{
					alt7 = 1;
				}
				else if (((LA7_0>=' ' && LA7_0<='!')||(LA7_0>='#' && LA7_0<='[')||(LA7_0>=']' && LA7_0<='~')))
				{
					alt7 = 2;
				}


				} finally { DebugExitDecision(7); }
				switch ( alt7 )
				{
				case 1:
					DebugEnterAlt(1);
					// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:137:25: ESC_SEQ
					{
					DebugLocation(137, 25);
					mESC_SEQ(); 

					}
					break;
				case 2:
					DebugEnterAlt(2);
					// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:137:35: PRINTABLECHAR
					{
					DebugLocation(137, 35);
					mPRINTABLECHAR(); 

					}
					break;

				default:
					goto loop7;
				}
			}

			loop7:
				;

			} finally { DebugExitSubRule(7); }

			DebugLocation(137, 51);
			mDOUBLE_QUOTE(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING", 54);
			LeaveRule("STRING", 54);
			LeaveRule_STRING();
		}
	}
	// $ANTLR end "STRING"

	partial void EnterRule_ESC_SEQ();
	partial void LeaveRule_ESC_SEQ();

	// $ANTLR start "ESC_SEQ"
	[GrammarRule("ESC_SEQ")]
	private void mESC_SEQ()
	{
		EnterRule_ESC_SEQ();
		EnterRule("ESC_SEQ", 55);
		TraceIn("ESC_SEQ", 55);
		try
		{
			int _type = ESC_SEQ;
			int _channel = DefaultTokenChannel;
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:139:9: ( BACK_SLASH ( 'n' | 'r' | 't' | DOUBLE_QUOTE | BACK_SLASH | HALFOFBYTE | ( WS )+ BACK_SLASH ) )
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:140:2: BACK_SLASH ( 'n' | 'r' | 't' | DOUBLE_QUOTE | BACK_SLASH | HALFOFBYTE | ( WS )+ BACK_SLASH )
			{
			DebugLocation(140, 2);
			mBACK_SLASH(); 
			DebugLocation(141, 2);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:141:2: ( 'n' | 'r' | 't' | DOUBLE_QUOTE | BACK_SLASH | HALFOFBYTE | ( WS )+ BACK_SLASH )
			int alt9=7;
			try { DebugEnterSubRule(9);
			try { DebugEnterDecision(9, false);
			switch (input.LA(1))
			{
			case 'n':
				{
				alt9 = 1;
				}
				break;
			case 'r':
				{
				alt9 = 2;
				}
				break;
			case 't':
				{
				alt9 = 3;
				}
				break;
			case '\"':
				{
				alt9 = 4;
				}
				break;
			case '\\':
				{
				alt9 = 5;
				}
				break;
			case '0':
			case '1':
				{
				alt9 = 6;
				}
				break;
			case '\t':
			case '\n':
			case '\r':
			case ' ':
				{
				alt9 = 7;
				}
				break;
			default:
				{
					NoViableAltException nvae = new NoViableAltException("", 9, 0, input);
					DebugRecognitionException(nvae);
					throw nvae;
				}
			}

			} finally { DebugExitDecision(9); }
			switch (alt9)
			{
			case 1:
				DebugEnterAlt(1);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:141:3: 'n'
				{
				DebugLocation(141, 3);
				Match('n'); 

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:142:3: 'r'
				{
				DebugLocation(142, 3);
				Match('r'); 

				}
				break;
			case 3:
				DebugEnterAlt(3);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:143:3: 't'
				{
				DebugLocation(143, 3);
				Match('t'); 

				}
				break;
			case 4:
				DebugEnterAlt(4);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:144:3: DOUBLE_QUOTE
				{
				DebugLocation(144, 3);
				mDOUBLE_QUOTE(); 

				}
				break;
			case 5:
				DebugEnterAlt(5);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:145:3: BACK_SLASH
				{
				DebugLocation(145, 3);
				mBACK_SLASH(); 

				}
				break;
			case 6:
				DebugEnterAlt(6);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:146:3: HALFOFBYTE
				{
				DebugLocation(146, 3);
				mHALFOFBYTE(); 

				}
				break;
			case 7:
				DebugEnterAlt(7);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:147:3: ( WS )+ BACK_SLASH
				{
				DebugLocation(147, 3);
				// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:147:3: ( WS )+
				int cnt8=0;
				try { DebugEnterSubRule(8);
				while (true)
				{
					int alt8=2;
					try { DebugEnterDecision(8, false);
					int LA8_0 = input.LA(1);

					if (((LA8_0>='\t' && LA8_0<='\n')||LA8_0=='\r'||LA8_0==' '))
					{
						alt8 = 1;
					}


					} finally { DebugExitDecision(8); }
					switch (alt8)
					{
					case 1:
						DebugEnterAlt(1);
						// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:147:4: WS
						{
						DebugLocation(147, 4);
						mWS(); 

						}
						break;

					default:
						if (cnt8 >= 1)
							goto loop8;

						EarlyExitException eee8 = new EarlyExitException( 8, input );
						DebugRecognitionException(eee8);
						throw eee8;
					}
					cnt8++;
				}
				loop8:
					;

				} finally { DebugExitSubRule(8); }

				DebugLocation(147, 9);
				mBACK_SLASH(); 

				}
				break;

			}
			} finally { DebugExitSubRule(9); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ESC_SEQ", 55);
			LeaveRule("ESC_SEQ", 55);
			LeaveRule_ESC_SEQ();
		}
	}
	// $ANTLR end "ESC_SEQ"

	public override void mTokens()
	{
		// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:8: ( ARRAY | OF | FUNC | VAR | IF | THEN | ELSE | WHILE | DO | FOR | TO | BREAK | LET | IN | END | TYPETOK | TYPE | NIL | PLUS | MINUS | MULT | DIV | EQ | NOTEQ | LTEQ | GTEQ | LT | GT | AND | OR | OPAR | CPAR | OBRACK | CBRACK | OKEYS | CKEYS | DOT | COMMA | SMCOL | COLON | ASSIGN | ID | INT | WS | COMMENT | PRINTABLECHAR | STRING | ESC_SEQ )
		int alt10=48;
		try { DebugEnterDecision(10, false);
		try
		{
			alt10 = dfa10.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(10); }
		switch (alt10)
		{
		case 1:
			DebugEnterAlt(1);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:10: ARRAY
			{
			DebugLocation(1, 10);
			mARRAY(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:16: OF
			{
			DebugLocation(1, 16);
			mOF(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:19: FUNC
			{
			DebugLocation(1, 19);
			mFUNC(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:24: VAR
			{
			DebugLocation(1, 24);
			mVAR(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:28: IF
			{
			DebugLocation(1, 28);
			mIF(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:31: THEN
			{
			DebugLocation(1, 31);
			mTHEN(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:36: ELSE
			{
			DebugLocation(1, 36);
			mELSE(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:41: WHILE
			{
			DebugLocation(1, 41);
			mWHILE(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:47: DO
			{
			DebugLocation(1, 47);
			mDO(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:50: FOR
			{
			DebugLocation(1, 50);
			mFOR(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:54: TO
			{
			DebugLocation(1, 54);
			mTO(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:57: BREAK
			{
			DebugLocation(1, 57);
			mBREAK(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:63: LET
			{
			DebugLocation(1, 63);
			mLET(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:67: IN
			{
			DebugLocation(1, 67);
			mIN(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:70: END
			{
			DebugLocation(1, 70);
			mEND(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:74: TYPETOK
			{
			DebugLocation(1, 74);
			mTYPETOK(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:82: TYPE
			{
			DebugLocation(1, 82);
			mTYPE(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:87: NIL
			{
			DebugLocation(1, 87);
			mNIL(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:91: PLUS
			{
			DebugLocation(1, 91);
			mPLUS(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:96: MINUS
			{
			DebugLocation(1, 96);
			mMINUS(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:102: MULT
			{
			DebugLocation(1, 102);
			mMULT(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:107: DIV
			{
			DebugLocation(1, 107);
			mDIV(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:111: EQ
			{
			DebugLocation(1, 111);
			mEQ(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:114: NOTEQ
			{
			DebugLocation(1, 114);
			mNOTEQ(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:120: LTEQ
			{
			DebugLocation(1, 120);
			mLTEQ(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:125: GTEQ
			{
			DebugLocation(1, 125);
			mGTEQ(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:130: LT
			{
			DebugLocation(1, 130);
			mLT(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:133: GT
			{
			DebugLocation(1, 133);
			mGT(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:136: AND
			{
			DebugLocation(1, 136);
			mAND(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:140: OR
			{
			DebugLocation(1, 140);
			mOR(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:143: OPAR
			{
			DebugLocation(1, 143);
			mOPAR(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:148: CPAR
			{
			DebugLocation(1, 148);
			mCPAR(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:153: OBRACK
			{
			DebugLocation(1, 153);
			mOBRACK(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:160: CBRACK
			{
			DebugLocation(1, 160);
			mCBRACK(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:167: OKEYS
			{
			DebugLocation(1, 167);
			mOKEYS(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:173: CKEYS
			{
			DebugLocation(1, 173);
			mCKEYS(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:179: DOT
			{
			DebugLocation(1, 179);
			mDOT(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:183: COMMA
			{
			DebugLocation(1, 183);
			mCOMMA(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:189: SMCOL
			{
			DebugLocation(1, 189);
			mSMCOL(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:195: COLON
			{
			DebugLocation(1, 195);
			mCOLON(); 

			}
			break;
		case 41:
			DebugEnterAlt(41);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:201: ASSIGN
			{
			DebugLocation(1, 201);
			mASSIGN(); 

			}
			break;
		case 42:
			DebugEnterAlt(42);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:208: ID
			{
			DebugLocation(1, 208);
			mID(); 

			}
			break;
		case 43:
			DebugEnterAlt(43);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:211: INT
			{
			DebugLocation(1, 211);
			mINT(); 

			}
			break;
		case 44:
			DebugEnterAlt(44);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:215: WS
			{
			DebugLocation(1, 215);
			mWS(); 

			}
			break;
		case 45:
			DebugEnterAlt(45);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:218: COMMENT
			{
			DebugLocation(1, 218);
			mCOMMENT(); 

			}
			break;
		case 46:
			DebugEnterAlt(46);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:226: PRINTABLECHAR
			{
			DebugLocation(1, 226);
			mPRINTABLECHAR(); 

			}
			break;
		case 47:
			DebugEnterAlt(47);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:240: STRING
			{
			DebugLocation(1, 240);
			mSTRING(); 

			}
			break;
		case 48:
			DebugEnterAlt(48);
			// C:\\Users\\Yanesita&Machy\\Desktop\\TIGER-YanetFrancisco(C412)-FabiolaBecerra(C411)\\CODIGO\\TigerCompiler\\TigerCompiler\\Grammar\\tiger.g:1:247: ESC_SEQ
			{
			DebugLocation(1, 247);
			mESC_SEQ(); 

			}
			break;

		}

	}


	#region DFA
	DFA10 dfa10;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa10 = new DFA10(this);
	}

	private class DFA10 : DFA
	{
		private const string DFA10_eotS =
			"\x1\xFFFF\xD\x29\x3\xFFFF\x1\x3F\x1\xFFFF\x1\x43\x1\x45\xB\xFFFF\x1\x52"+
			"\x7\xFFFF\x1\x29\x1\xFFFF\x1\x55\x3\x29\x1\x59\x1\x5B\x1\x29\x1\x5D\x4"+
			"\x29\x1\x62\x4\x29\x19\xFFFF\x1\x29\x1\xFFFF\x1\x29\x1\x69\x1\x6A\x1"+
			"\xFFFF\x1\x6B\x1\xFFFF\x1\x29\x1\xFFFF\x2\x29\x1\x6F\x1\x29\x1\xFFFF"+
			"\x1\x29\x1\x72\x1\x29\x1\x74\x2\x29\x3\xFFFF\x1\x77\x1\x78\x1\x79\x1"+
			"\xFFFF\x2\x29\x1\xFFFF\x1\x29\x1\xFFFF\x1\x7D\x1\x29\x3\xFFFF\x1\x7F"+
			"\x1\x80\x1\x29\x1\xFFFF\x1\x29\x2\xFFFF\x1\x6B\x1\x29\x1\x84\x1\xFFFF";
		private const string DFA10_eofS =
			"\x85\xFFFF";
		private const string DFA10_minS =
			"\x1\x9\x1\x72\x1\x66\x1\x6F\x1\x61\x1\x66\x1\x68\x1\x6C\x1\x68\x1\x6F"+
			"\x1\x72\x1\x65\x1\x74\x1\x69\x3\xFFFF\x1\x2A\x1\xFFFF\x2\x3D\xB\xFFFF"+
			"\x1\x3D\x7\xFFFF\x1\x72\x1\xFFFF\x1\x30\x1\x6E\x2\x72\x2\x30\x1\x65\x1"+
			"\x30\x1\x70\x1\x73\x1\x64\x1\x69\x1\x30\x1\x65\x1\x74\x1\x72\x1\x6C\x19"+
			"\xFFFF\x1\x61\x1\xFFFF\x1\x63\x2\x30\x1\xFFFF\x1\x30\x1\xFFFF\x1\x6E"+
			"\x1\xFFFF\x2\x65\x1\x30\x1\x6C\x1\xFFFF\x1\x61\x1\x30\x1\x69\x1\x30\x1"+
			"\x79\x1\x74\x3\xFFFF\x3\x30\x1\xFFFF\x1\x65\x1\x6B\x1\xFFFF\x1\x6E\x1"+
			"\xFFFF\x1\x30\x1\x69\x3\xFFFF\x2\x30\x1\x67\x1\xFFFF\x1\x6F\x2\xFFFF"+
			"\x1\x30\x1\x6E\x1\x30\x1\xFFFF";
		private const string DFA10_maxS =
			"\x1\x7E\x1\x72\x1\x66\x1\x75\x1\x61\x1\x6E\x1\x79\x1\x6E\x1\x68\x1\x6F"+
			"\x1\x72\x1\x65\x1\x74\x1\x69\x3\xFFFF\x1\x2A\x1\xFFFF\x1\x3E\x1\x3D\xB"+
			"\xFFFF\x1\x3D\x7\xFFFF\x1\x72\x1\xFFFF\x1\x7A\x1\x6E\x2\x72\x2\x7A\x1"+
			"\x65\x1\x7A\x1\x70\x1\x73\x1\x64\x1\x69\x1\x7A\x1\x65\x1\x74\x1\x72\x1"+
			"\x6C\x19\xFFFF\x1\x61\x1\xFFFF\x1\x63\x2\x7A\x1\xFFFF\x1\x7A\x1\xFFFF"+
			"\x1\x6E\x1\xFFFF\x2\x65\x1\x7A\x1\x6C\x1\xFFFF\x1\x61\x1\x7A\x1\x69\x1"+
			"\x7A\x1\x79\x1\x74\x3\xFFFF\x3\x7A\x1\xFFFF\x1\x65\x1\x6B\x1\xFFFF\x1"+
			"\x6E\x1\xFFFF\x1\x7A\x1\x69\x3\xFFFF\x2\x7A\x1\x67\x1\xFFFF\x1\x6F\x2"+
			"\xFFFF\x1\x7A\x1\x6E\x1\x7A\x1\xFFFF";
		private const string DFA10_acceptS =
			"\xE\xFFFF\x1\x13\x1\x14\x1\x15\x1\xFFFF\x1\x17\x2\xFFFF\x1\x1D\x1\x1E"+
			"\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25\x1\x26\x1\x27\x1\xFFFF"+
			"\x1\x2A\x1\x2B\x2\x2C\x1\x2E\x1\x2F\x1\x30\x1\xFFFF\x1\x2A\x11\xFFFF"+
			"\x1\x13\x1\x14\x1\x15\x1\x2D\x1\x16\x1\x17\x1\x18\x1\x19\x1\x1B\x1\x1A"+
			"\x1\x1C\x1\x1D\x1\x1E\x1\x1F\x1\x20\x1\x21\x1\x22\x1\x23\x1\x24\x1\x25"+
			"\x1\x26\x1\x27\x1\x29\x1\x28\x1\x2B\x1\xFFFF\x1\x2\x3\xFFFF\x1\x5\x1"+
			"\xFFFF\x1\xE\x1\xFFFF\x1\xB\x4\xFFFF\x1\x9\x6\xFFFF\x1\xA\x1\x4\x1\x11"+
			"\x3\xFFFF\x1\xF\x2\xFFFF\x1\xD\x1\xFFFF\x1\x12\x2\xFFFF\x1\x6\x1\x10"+
			"\x1\x7\x3\xFFFF\x1\x1\x1\xFFFF\x1\x8\x1\xC\x3\xFFFF\x1\x3";
		private const string DFA10_specialS =
			"\x85\xFFFF}>";
		private static readonly string[] DFA10_transitionS =
			{
				"\x2\x24\x2\xFFFF\x1\x24\x12\xFFFF\x1\x23\x1\x25\x1\x26\x3\x25\x1\x15"+
				"\x1\x25\x1\x17\x1\x18\x1\x10\x1\xE\x1\x1E\x1\xF\x1\x1D\x1\x11\xA\x22"+
				"\x1\x20\x1\x1F\x1\x13\x1\x12\x1\x14\x2\x25\x1A\x21\x1\x19\x1\x27\x1"+
				"\x1A\x3\x25\x1\x1\x1\xA\x1\x21\x1\x9\x1\x7\x1\x3\x2\x21\x1\x5\x2\x21"+
				"\x1\xB\x1\x21\x1\xD\x1\x2\x3\x21\x1\xC\x1\x6\x1\x21\x1\x4\x1\x8\x3\x21"+
				"\x1\x1B\x1\x16\x1\x1C\x1\x25",
				"\x1\x28",
				"\x1\x2A",
				"\x1\x2C\x5\xFFFF\x1\x2B",
				"\x1\x2D",
				"\x1\x2E\x7\xFFFF\x1\x2F",
				"\x1\x30\x6\xFFFF\x1\x31\x9\xFFFF\x1\x32",
				"\x1\x33\x1\xFFFF\x1\x34",
				"\x1\x35",
				"\x1\x36",
				"\x1\x37",
				"\x1\x38",
				"\x1\x39",
				"\x1\x3A",
				"",
				"",
				"",
				"\x1\x3E",
				"",
				"\x1\x42\x1\x41",
				"\x1\x44",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x51",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x54",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x56",
				"\x1\x57",
				"\x1\x58",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x13\x29\x1\x5A\x6"+
				"\x29",
				"\x1\x5C",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x5E",
				"\x1\x5F",
				"\x1\x60",
				"\x1\x61",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x63",
				"\x1\x64",
				"\x1\x65",
				"\x1\x66",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x67",
				"",
				"\x1\x68",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\x1\x6C",
				"",
				"\x1\x6D",
				"\x1\x6E",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x70",
				"",
				"\x1\x71",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x73",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x75",
				"\x1\x76",
				"",
				"",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"",
				"\x1\x7A",
				"\x1\x7B",
				"",
				"\x1\x7C",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x7E",
				"",
				"",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x81",
				"",
				"\x1\x82",
				"",
				"",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				"\x1\x83",
				"\xA\x29\x7\xFFFF\x1A\x29\x4\xFFFF\x1\x29\x1\xFFFF\x1A\x29",
				""
			};

		private static readonly short[] DFA10_eot = DFA.UnpackEncodedString(DFA10_eotS);
		private static readonly short[] DFA10_eof = DFA.UnpackEncodedString(DFA10_eofS);
		private static readonly char[] DFA10_min = DFA.UnpackEncodedStringToUnsignedChars(DFA10_minS);
		private static readonly char[] DFA10_max = DFA.UnpackEncodedStringToUnsignedChars(DFA10_maxS);
		private static readonly short[] DFA10_accept = DFA.UnpackEncodedString(DFA10_acceptS);
		private static readonly short[] DFA10_special = DFA.UnpackEncodedString(DFA10_specialS);
		private static readonly short[][] DFA10_transition;

		static DFA10()
		{
			int numStates = DFA10_transitionS.Length;
			DFA10_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA10_transition[i] = DFA.UnpackEncodedString(DFA10_transitionS[i]);
			}
		}

		public DFA10( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 10;
			this.eot = DFA10_eot;
			this.eof = DFA10_eof;
			this.min = DFA10_min;
			this.max = DFA10_max;
			this.accept = DFA10_accept;
			this.special = DFA10_special;
			this.transition = DFA10_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( ARRAY | OF | FUNC | VAR | IF | THEN | ELSE | WHILE | DO | FOR | TO | BREAK | LET | IN | END | TYPETOK | TYPE | NIL | PLUS | MINUS | MULT | DIV | EQ | NOTEQ | LTEQ | GTEQ | LT | GT | AND | OR | OPAR | CPAR | OBRACK | CBRACK | OKEYS | CKEYS | DOT | COMMA | SMCOL | COLON | ASSIGN | ID | INT | WS | COMMENT | PRINTABLECHAR | STRING | ESC_SEQ );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}

} // namespace  TigerCompiler.Grammar 
